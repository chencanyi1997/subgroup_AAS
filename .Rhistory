knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
options(warn = -1) # suppress warings globally
library(tidyverse)
library(glmnet)
library(PRIMsrc)
library(hrbrthemes)
library(Amelia) ## for missmap
library(viridis)
library(plotly)
library(Ckmeans.1d.dp)
df %>% ggplot(aes(x = k, y = bic))+
geom_point() +
scale_x_continuous(breaks= x)
x
df %>% ggplot(aes(x = k, y = bic))+
geom_point() +
scale_x_continuous(breaks= k[1:10])
df %>% ggplot(aes(x = k, y = bic))+
geom_point() +
scale_x_continuous(breaks= k[1:10]) +
theme_classic()
k[1:10]
k
df %>% ggplot(aes(x = k, y = bic))+
geom_point() +
scale_x_continuous(breaks= karr[1:10]) +
theme_classic()
computeBIC <- function(X, y, muh, betah, k, c = 10) {
s <- sum(abs(betah)>0)
n <- dim(X)[1]
p <- dim(X)[2]
Qn <- sum((y-muh-X%*%betah)^2)/n
df <- k+p;
bic <- log(Qn) + c*log(log(n+p))*log(n)/n*df;
return(bic)
}
n <- dim(x)[1]
p <- dim(x)[2]
kL <- 1
kU <- n-1
karr <- seq(kL,kU)
bicarr <- -1*rep(1,length(karr))
for ( i in 1:length(karr)) {
k <- karr[i]
r <- Ckmeans.1d.dp(res[[1]],k)
muh <- r$centers[r$cluster]
bicarr[i] <- computeBIC(x,y,muh,beta,i)
}
plot(bicarr[1:10])
df <- data.frame(k = karr[1:10],
bic = bicarr[1:10])
df %>% ggplot(aes(x = k, y = bic))+
geom_point() +
scale_x_continuous(breaks= karr[1:10]) +
theme_classic()
date
date()
# ------------------------------------------------------------
# Subgroup Anylysis with the Lung Dataset
# Chen Canyi
# chency1997@ruc.edu.cn
# Fri May 08 22:22:43 2020
# ------------------------------------------------------------
# ------------------------------------------------------------
# Reproducibility: Reproducible_Subgroup script
# ------------------------------------------------------------
# This file contains instructionss for reproducing data,
# figures, tables and all analysis in the report.
# ------------------------------------------------------------
# Step 0: Load necessary packages
# ------------------------------------------------------------
library(tidyverse)
library(glmnet)
library(PRIMsrc)
library(hrbrthemes)
library(Amelia) # for missmap
library(viridis)
library(plotly)
library(Ckmeans.1d.dp)
# ------------------------------------------------------------
# Exploratory Data Analysis
# ------------------------------------------------------------
head(Real.2[,1:10])
tail(Real.2[,1:10])
dim(Real.2)
str(Real.2[,1:10])
summary(Real.2[,1:10])
(colSums(Real.2==0)/ncol(Real.2))[1:10] ## zero-inflate effect
missmap(Real.2)
x <- Real.2[, -c(1)] %>% apply(2, as.numeric)
y <- Real.2$y
cvfit <- cv.glmnet(x, y)
plot(cvfit)
beta <- coef(cvfit, s = "lambda.min")
beta <- beta[2:length(beta)]
yhat <- x %*% beta
res = y - x %*% beta
res = res %>% as.data.frame
colnames(res) = "ires"
ggplot(res, aes(x = ires, y = ..density..)) +
geom_histogram(fill = "cornsilk",
colour = "grey60",
size = 0.2) + geom_density() + xlim(-2, 1) +
theme_classic()
sourceDir <- "./Code"
paste0(sourceDir,"computeBIC.R")
paste0(sourceDir,"/computeBIC.R")
paste(sourceDir,"computeBIC.R",sep = "/")
source(paste(sourceDir,"computeBIC.R",sep = "/"))
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproducible_subgroup.R', echo=TRUE)
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproducible_subgroup.R', echo=TRUE)
library(usethis)
use_readme_rmd()
packageVersion("snow")
"Rmpi" %in% loadedNamespaces()
sessionInfo()
s <- sessionInfo()
s$loadedOnly
s$BLAS
s$LAPACK
version
p
packgeVersion("tidyverse")
library(dplyr)
packgeVersion("tidyverse")
package_version("tidyverse")
package_version("readr")
packageVersion("readr")
packageVersion("tidyverse")
packageVersion("glmnet")
packageVersion(c("PRIMsrc"))
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
?missmap
packageVersion(c("Amelia","Ckmeans.1d.dp"))
packageVersion("Ckmeans.1d.dp")
??Amelia
Amelia::AmeliaView()
packageVersion("PRIMsrc")
if(!"shiny" %in% installed.packages()){
install.packages("shiny")
}
library(shiny)
library(htmltools)
remove.packages("htmltools", lib="~/R/win-library/3.6")
if(!"shiny" %in% installed.packages()){
install.packages("shiny")
}
library(shiny)
remove.packages("shiny", lib="~/R/win-library/3.6")
install.packages("shiny")
install.packages("shiny")
shinyUI(fluidPage(
# Application title
titlePanel("Kernel Desitity with partial Ovary Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("dataRange",
label = "Choose the data range:",
min = 1,
max = 49, step = 1, value = 2),
sliderInput("LambdaRange",
label = "Parameter Selection of lambda:",
min = 0,
max = 1, step = 0.01, value = 1),
sliderInput("OmegaRange",
label = "Parameter Selection of omega:",
min = 0,
max = 1, step = 0.01, value = 0.55)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny); runApp('Shiny/shiny_server.R')
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
df
min(df)
?min
df[which.min(df$bic)]
which.min(df$bic)
df[which.min(df$bic),1]
runApp('Shiny/shiny_server.R')
runApp('Shiny/shiny_server.R')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='chency1997', token='C47A3D861BE076F36EFAB29B00226DFB', secret='L2ZTYQHR/U0MGg2S4hKq97aIEEIqCXha0xsSHj2u')
library(shiny)
runApp()
setwd("./Shiny/")
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
computeBIC <- reactive(function(X, y, muh, betah, k, c = 10) {
s <- sum(abs(betah) > 0)
n <- dim(X)[1]
p <- dim(X)[2]
Qn <- sum((y - muh - X %*% betah) ^ 2) / n
df <- k + p
bic <- log(Qn) + c * log(log(n + p)) * log(n) / n * df
return(bic)
})
computeBIC <- function(X, y, muh, betah, k, c = 10) {
s <- sum(abs(betah) > 0)
n <- dim(X)[1]
p <- dim(X)[2]
Qn <- sum((y - muh - X %*% betah) ^ 2) / n
df <- k + p
bic <- log(Qn) + c * log(log(n + p)) * log(n) / n * df
return(bic)
}
x <- Real.2[, -c(1)] %>% apply(2, as.numeric)
y <- Real.2$y
cvfit <- cv.glmnet(x, y)
plot(cvfit)
beta <- coef(cvfit, s = "lambda.min")
beta <- beta[2:length(beta)]
yhat <- x %*% beta
res = y - x %*% beta
res = res %>% as.data.frame
colnames(res) = "ires"
n <- dim(x)[1]
p <- dim(x)[2]
kL <- input$min
kU <- input$max
karr <- seq(kL, kU)
bicarr <- -1 * rep(1, length(karr))
input$min = 3
input <- NA
input$min = 3
input$max = 3
input
n <- dim(x)[1]
p <- dim(x)[2]
kL <- input$min
kU <- input$max
karr <- seq(kL, kU)
bicarr <- -1 * rep(1, length(karr))
kL
for (i in 1:length(karr)) {
k <- karr[i]
r <- Ckmeans.1d.dp(res[[1]], k)
muh <- r$centers[r$cluster]
bicarr[i] <- computeBIC(x, y, muh, beta, i)
}
df <- data.frame(k = karr,
bic = bicarr)
cl <- kmeans(res, kk)
res$cluster <- cl$cluster
res1 <- res %>% as.data.frame() %>% filter(cl$cluster == 1)
res2 <- res %>% as.data.frame() %>% filter(cl$cluster == 2)
bicp <- df %>% ggplot(aes(x = k, y = bic)) +
geom_point() +
scale_x_continuous(breaks = karr) +
theme_classic()
kk <- df[which.min(df$bic),1]
bicp
cl <- kmeans(res, kk)
res$cluster <- cl$cluster
res1 <- res %>% as.data.frame() %>% filter(cl$cluster == 1)
res2 <- res %>% as.data.frame() %>% filter(cl$cluster == 2)
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
setwd("..")
source('C:/Users/chencanyi/OneDrive/subgroup_AAS/Reproduce_Subgroup.R', echo=TRUE)
renderDataTable()
?renderDataTable()
runApp()
setwd("./Shiny/")
runApp()
runApp()
runApp()
library(cowplot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggpubr)
runApp()
runApp()
computeBIC <- function(X, y, muh, betah, k, c = 10) {
s <- sum(abs(betah) > 0)
n <- dim(X)[1]
p <- dim(X)[2]
Qn <- sum((y - muh - X %*% betah) ^ 2) / n
df <- k + p
bic <- log(Qn) + c * log(log(n + p)) * log(n) / n * df
return(bic)
}
# ------------------------------------------------------------
# Step 1: Exploratory Data Analysis
# ------------------------------------------------------------
head(Real.2[, 1:10])
tail(Real.2[, 1:10])
dim(Real.2)
str(Real.2[, 1:10])
summary(Real.2[, 1:10])
(colSums(Real.2 == 0) / ncol(Real.2))[1:10] ## zero-inflate effect
missmap(Real.2)
# ------------------------------------------------------------
# Step2: Conduct parameter tuning for $\lambda$ by crossvali-
# dation
# ------------------------------------------------------------
x <- Real.2[, -c(1)] %>% apply(2, as.numeric)
y <- Real.2$y
cvfit <- cv.glmnet(x, y)
p1 <- plot(cvfit)
# ------------------------------------------------------------
# Step3: Ajusting the effect of $\x_i$ using the best tuning
# parameter $\lambda$
# ------------------------------------------------------------
beta <- coef(cvfit, s = "lambda.min")
beta <- beta[2:length(beta)]
yhat <- x %*% beta
res = y - x %*% beta
res = res %>% as.data.frame
colnames(res) = "ires"
p2 <- ggplot(res, aes(x = ires, y = ..density..)) +
geom_histogram(fill = "cornsilk",
colour = "grey60",
size = 0.2) + geom_density() + xlim(-2, 1) +
theme_classic()
# ------------------------------------------------------------
# Step4: Conduct parameter tuning for $k$ by the BIC
# ------------------------------------------------------------
n <- dim(x)[1]
p <- dim(x)[2]
kL <- input$min
kU <- input$max
karr <- seq(kL, kU)
bicarr <- -1 * rep(1, length(karr))
for (i in 1:length(karr)) {
k <- karr[i]
r <- Ckmeans.1d.dp(res[[1]], k)
muh <- r$centers[r$cluster]
bicarr[i] <- computeBIC(x, y, muh, beta, i)
}
df <- data.frame(k = karr,
bic = bicarr)
p3 <- df %>% ggplot(aes(x = k, y = bic)) +
geom_point() +
scale_x_continuous(breaks = karr) +
theme_classic()
kk <- df[which.min(df$bic),1]
# ------------------------------------------------------------
# Step5: Apply kmeans to the ajusted $\widetilde{Y_i}$
# ------------------------------------------------------------
cl <- kmeans(res, kk)
res$cluster <- cl$cluster
res1 <- res %>% as.data.frame() %>% filter(cl$cluster == 1)
res2 <- res %>% as.data.frame() %>% filter(cl$cluster == 2)
p4 <- 	ggplot(res, aes(
x = ires,
y = ..density..,
color = cluster,
group = cluster
)) +
geom_histogram() +
geom_density(adjust = 1.5) +
facet_wrap( ~ cluster) +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
axis.ticks.x = element_blank()
) +
theme_classic()
p5 <- 	ggplot(res, aes(x = ires, color = cluster, group = cluster)) +
geom_boxplot() +
coord_flip() +
theme_classic()
ggarrange(ggarrange(p1,p2,p3,ncol = 3),
ggarrange(p4,p5,ncol = 2),
nrow = 2)
input <- NA
input$min <- 3
input$max <- 5
computeBIC <- function(X, y, muh, betah, k, c = 10) {
s <- sum(abs(betah) > 0)
n <- dim(X)[1]
p <- dim(X)[2]
Qn <- sum((y - muh - X %*% betah) ^ 2) / n
df <- k + p
bic <- log(Qn) + c * log(log(n + p)) * log(n) / n * df
return(bic)
}
# ------------------------------------------------------------
# Step 1: Exploratory Data Analysis
# ------------------------------------------------------------
head(Real.2[, 1:10])
tail(Real.2[, 1:10])
dim(Real.2)
str(Real.2[, 1:10])
summary(Real.2[, 1:10])
(colSums(Real.2 == 0) / ncol(Real.2))[1:10] ## zero-inflate effect
missmap(Real.2)
# ------------------------------------------------------------
# Step2: Conduct parameter tuning for $\lambda$ by crossvali-
# dation
# ------------------------------------------------------------
x <- Real.2[, -c(1)] %>% apply(2, as.numeric)
y <- Real.2$y
cvfit <- cv.glmnet(x, y)
p1 <- plot(cvfit)
# ------------------------------------------------------------
# Step3: Ajusting the effect of $\x_i$ using the best tuning
# parameter $\lambda$
# ------------------------------------------------------------
beta <- coef(cvfit, s = "lambda.min")
beta <- beta[2:length(beta)]
yhat <- x %*% beta
res = y - x %*% beta
res = res %>% as.data.frame
colnames(res) = "ires"
p2 <- ggplot(res, aes(x = ires, y = ..density..)) +
geom_histogram(fill = "cornsilk",
colour = "grey60",
size = 0.2) + geom_density() + xlim(-2, 1) +
theme_classic()
# ------------------------------------------------------------
# Step4: Conduct parameter tuning for $k$ by the BIC
# ------------------------------------------------------------
n <- dim(x)[1]
p <- dim(x)[2]
kL <- input$min
kU <- input$max
karr <- seq(kL, kU)
bicarr <- -1 * rep(1, length(karr))
for (i in 1:length(karr)) {
k <- karr[i]
r <- Ckmeans.1d.dp(res[[1]], k)
muh <- r$centers[r$cluster]
bicarr[i] <- computeBIC(x, y, muh, beta, i)
}
df <- data.frame(k = karr,
bic = bicarr)
p3 <- df %>% ggplot(aes(x = k, y = bic)) +
geom_point() +
scale_x_continuous(breaks = karr) +
theme_classic()
kk <- df[which.min(df$bic),1]
# ------------------------------------------------------------
# Step5: Apply kmeans to the ajusted $\widetilde{Y_i}$
# ------------------------------------------------------------
cl <- kmeans(res, kk)
res$cluster <- cl$cluster
res1 <- res %>% as.data.frame() %>% filter(cl$cluster == 1)
res2 <- res %>% as.data.frame() %>% filter(cl$cluster == 2)
p4 <- 	ggplot(res, aes(
x = ires,
y = ..density..,
color = cluster,
group = cluster
)) +
geom_histogram() +
geom_density(adjust = 1.5) +
facet_wrap( ~ cluster) +
theme(
legend.position = "none",
panel.spacing = unit(0.1, "lines"),
axis.ticks.x = element_blank()
) +
theme_classic()
p5 <- 	ggplot(res, aes(x = ires, color = cluster, group = cluster)) +
geom_boxplot() +
coord_flip() +
theme_classic()
ggarrange(ggarrange(p1,p2,p3,ncol = 3),
ggarrange(p4,p5,ncol = 2),
nrow = 2)
ggarrange(ggarrange(p1,p2,p3,ncol = 3),
ggarrange(p4,p5,ncol = 2),
nrow = 2)
library(cowplot)
plot_grid(p1,p2)
plot_grid(p2,p3)
runApp()
runApp()
